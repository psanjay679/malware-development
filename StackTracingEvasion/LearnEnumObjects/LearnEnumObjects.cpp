#include <Windows.h>
#include <stdio.h>

EXTERN_C int CALLBACK EnumObjectsProc(_In_ LPVOID lpLogObject, _In_ LPARAM lpData);
EXTERN_C VOID SetLibrary(DWORD64);

typedef NTSTATUS(*_NtAllocateVirtualMemory)(
    HANDLE    ProcessHandle,
    PVOID* BaseAddress,
    ULONG_PTR ZeroBits,
    PSIZE_T   RegionSize,
    ULONG     AllocationType,
    ULONG     Protect
    );

typedef struct _NTALLOCATE_VIRTUAL_MEMORY_ARGS {
    UINT_PTR    NtAllocateVirtualMemory;
    HANDLE      hProcess;
    PVOID*      BaseAddress;
    PSIZE_T     RegionSize;
    ULONG       Protect;
}NTALLOCATE_VIRTUAL_MEMORY_ARGS, * PNTALLOCATE_VIRTUAL_MEMORY_ARGS;

int main() {

    PVOID BaseAddress = NULL;
    SIZE_T RegionSize = 0x1000;

    UINT_PTR NtAllocateVirtualMemory = (UINT_PTR)(GetProcAddress(GetModuleHandleA("ntdll.dll"), "NtAllocateVirtualMemory"));
    NTALLOCATE_VIRTUAL_MEMORY_ARGS args = { 0 };
    args.NtAllocateVirtualMemory = NtAllocateVirtualMemory;
    args.hProcess = (HANDLE)-1;
    args.Protect = PAGE_EXECUTE_READWRITE;
    args.BaseAddress = &BaseAddress;
    args.RegionSize = &RegionSize;

    LOGFONTW lf = { 0 };
    lf.lfCharSet = DEFAULT_CHARSET;

    HDC dc = GetDC(NULL);
    EnumObjects(dc, OBJ_BRUSH, (GOBJENUMPROC)EnumObjectsProc, (LPARAM)&args);

    printf("AllocatedBasedAddress: %p\n", BaseAddress);

    getchar();

    return 0;

}