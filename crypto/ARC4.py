from Crypto.Cipher import ARC4


class ARC4_:

    def __init__(self, key):

        self.key = key
        self.sbox = [0 for _ in range(0x100)]

        self._key_scheduling()

    def swap(self, i, j):
        self.sbox[i], self.sbox[j] = self.sbox[j], self.sbox[i]

    def encrypt(self, data):

        i = 0
        j = 0
        result = b""

        for d in data:
            i = (i + 1) % 0x100
            j = (j + self.sbox[i]) % 0x100
            self.swap(i, j)
            t = (self.sbox[i] + self.sbox[j]) % 0x100
            k = self.sbox[t]
            result += (k ^ d).to_bytes(1, "little")

        return result

    def decrypt(self, data):

        i = 0
        j = 0
        result = b""
        for d in data:
            i = (i + 1) % 0x100
            j = (j + self.sbox[i]) % 0x100
            self.swap(i, j)
            t = (self.sbox[i] + self.sbox[j]) % 0x100
            k = self.sbox[t]
            result += (k ^ d).to_bytes(1, "little")

        return result

    def _key_scheduling(self):

        for i in range(0x100):
            self.sbox[i] = i

        j = 0

        for i in range(0x100):
            j = (j + self.sbox[i] + self.key[i % len(self.key)]) % 0x100
            self.sbox[i], self.sbox[j] = self.sbox[j], self.sbox[i]


if __name__ == '__main__':

    key = b"this_is_key"
    data = b"this_is_data"

    arc = ARC4.new(key)
    enc_data = arc.encrypt(data)

    arc2 = ARC4_(key)
    dec_data = arc2.decrypt(enc_data)

    print(dec_data)
