#include "lib.h"

void parse_pe(DWORD64 pe_base) {
	
	IMAGE_DOS_HEADER *dos_header = (IMAGE_DOS_HEADER*)pe_base;
	IMAGE_NT_HEADERS* nt_headers = (IMAGE_NT_HEADERS*)(dos_header->e_lfanew + pe_base);
	DWORD64 section_addr = (DWORD64)nt_headers + sizeof(DWORD) + sizeof(IMAGE_FILE_HEADER) + nt_headers->FileHeader.SizeOfOptionalHeader;
	DWORD64 import_directory_rva = nt_headers->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress;
	DWORD64 raw_offset, import_section_addr;
	IMAGE_SECTION_HEADER* import_section = NULL, * text_section = NULL;
	IMAGE_IMPORT_DESCRIPTOR *import_descriptor;
	IMAGE_THUNK_DATA* first_thunk, *original_first_thunk;
	DWORD thunk_data;

	printf("are equal: %x\n", section_addr == pe_base + dos_header->e_lfanew + sizeof(IMAGE_NT_HEADERS));

	for (int i = 0; i < nt_headers->FileHeader.NumberOfSections; i++) {
		IMAGE_SECTION_HEADER* section = (IMAGE_SECTION_HEADER*)section_addr;
		printf("%s\n", section->Name);
		if (import_directory_rva > section->VirtualAddress && import_directory_rva < section->VirtualAddress + section->SizeOfRawData) {
			printf("found offset of import table...");
			import_section_addr = section_addr;
			import_section = section;
		}
		section_addr += sizeof(IMAGE_SECTION_HEADER);
	}

	raw_offset = pe_base + import_section->PointerToRawData;

	import_descriptor = (IMAGE_IMPORT_DESCRIPTOR*)(raw_offset + import_directory_rva - import_section->VirtualAddress);
	for (; import_descriptor->Name != 0; import_descriptor++) {
		printf("%s\n", raw_offset + import_descriptor->Name - import_section->VirtualAddress);
		thunk_data = import_descriptor->OriginalFirstThunk == 0 ? import_descriptor->FirstThunk : import_descriptor->OriginalFirstThunk;
		first_thunk = (IMAGE_THUNK_DATA*)(raw_offset + thunk_data - import_section->VirtualAddress);
		for (; first_thunk->u1.AddressOfData != 0; first_thunk++) {
			
			printf("\t%I64x\t%s\n", first_thunk->u1.Function, raw_offset + first_thunk->u1.AddressOfData + 2 - import_section->VirtualAddress);
		}
	}
}

DWORD64 get_pe_base(char* file_name) {

	HANDLE h_file;
	DWORD file_size;
	unsigned char* buffer;

	printf("processing file \"%s\"...\n-----\n", file_name);

	h_file = CreateFileA(file_name, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);

	if (h_file == INVALID_HANDLE_VALUE) {
		printf("could not open file. error: %x\n", GetLastError());
		exit(-1);
	}

	file_size = GetFileSize(h_file, NULL);

	buffer = (unsigned char*)malloc(file_size * (sizeof(unsigned char)));
	ReadFile(h_file, (VOID*)buffer, file_size, NULL, NULL);

	for (int i = 0; i < 2; i++) {
		printf("%x ", buffer[i]);
	}
	printf("\n");

	return (DWORD64)buffer;
}