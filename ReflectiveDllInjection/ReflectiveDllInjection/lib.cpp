#include "lib.h"

DWORD64 get_api_addr(DWORD64 dll_base, DWORD _api_hash_val) {

    IMAGE_DOS_HEADER* dos_header = (IMAGE_DOS_HEADER*)dll_base;
    IMAGE_NT_HEADERS* nt_headers = (IMAGE_NT_HEADERS*)(dll_base + dos_header->e_lfanew);
    WORD* ordinal_arr;
    DWORD* names_addr_arr, * func_addr_arr, api_hash_val;
    DWORD64 func_addr, name_addr;

    IMAGE_EXPORT_DIRECTORY* export_directory = (IMAGE_EXPORT_DIRECTORY*)(dll_base + nt_headers->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);

    ordinal_arr = (WORD*)(dll_base + export_directory->AddressOfNameOrdinals);
    names_addr_arr = (DWORD*)(dll_base + export_directory->AddressOfNames);
    func_addr_arr = (DWORD*)(dll_base + export_directory->AddressOfFunctions);

    for (int i = 0; i < export_directory->NumberOfNames; i++) {

        func_addr = dll_base + func_addr_arr[ordinal_arr[i]];
        name_addr = dll_base + names_addr_arr[i];
        api_hash_val = api_hashing(name_addr);
        if (api_hash_val == _api_hash_val) {
            return func_addr;
        }
    }

    return 0;
}


DWORD64 _get_dll_base(DWORD _hash_val) {

    DWORD64 ldr = get_ldr();
    DWORD64 next_ldr = get_next_ldr(ldr);
    DWORD64 dll_buffer;
    DWORD hash_val;

    while (next_ldr != ldr) {
        dll_buffer = get_dll_buffer(next_ldr);
        hash_val = dll_hashing(dll_buffer);
        //printf("api_hash: %08x, dll_name: %ws\n", hash_val, dll_buffer);
        if (hash_val == _hash_val) {
            return get_dll_base(next_ldr);
        }
        next_ldr = get_next_ldr(next_ldr);
    }

    return 0;
}


