#include "lib.h"

DWORD get_pid(wchar_t* pname) {

	HANDLE hsnap;
	PROCESSENTRY32 pe32;
	pe32.dwSize = sizeof(PROCESSENTRY32);

	hsnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, NULL);

	if (hsnap == INVALID_HANDLE_VALUE) {
		printf("could not obtain handle to snapshot. error: %x\n", GetLastError());
		exit(-1);
	}

	Process32First(hsnap, &pe32);

	do {
		if (wcscmp(pe32.szExeFile, pname) == 0) {
			return pe32.th32ProcessID;
		}
	} while (Process32Next(hsnap, &pe32));

	printf("process: %ws note found. returing null\n", pname);

	return NULL;
}


HANDLE OpenProcByPid(DWORD pid) {
	
	HANDLE hProcess;

	hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, pid);

	if (hProcess == INVALID_HANDLE_VALUE) {
		printf("could not open process. error: %x\n", GetLastError());
		exit(-1);
	}

	return hProcess;
}

HANDLE OpenProcByName(wchar_t* pname) {
	DWORD pid;
	pid = get_pid(pname);
	return OpenProcByPid(pid);
}