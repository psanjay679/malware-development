#include <stdio.h>
#include <Windows.h>
#include <winternl.h>


typedef BOOL(WINAPI* DllEntry)(HINSTANCE, DWORD, LPVOID);


void load_dll(unsigned char* base) {

    SIZE_T image_size;
    LPVOID image_base, src_addr, dest_addr;
    PCHAR func_name, lib_name;
    HMODULE hModule;
    IMAGE_DOS_HEADER* dos_header;
    IMAGE_NT_HEADERS* nt_headers;
    PIMAGE_SECTION_HEADER section;
    PIMAGE_IMPORT_DESCRIPTOR import_desc;
    PIMAGE_THUNK_DATA thunk_data;

    dos_header = (IMAGE_DOS_HEADER*)base;
    nt_headers = (IMAGE_NT_HEADERS*)(base + dos_header->e_lfanew);
    image_size = nt_headers->OptionalHeader.SizeOfImage;

    /*printf("Image Base: %08x\n", nt_headers->OptionalHeader.ImageBase);
    printf("Image Size: %08x\n", image_size);*/

    image_base = VirtualAlloc((LPVOID)nt_headers->OptionalHeader.ImageBase, (SIZE_T)image_size, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);

    printf("image_base: %I64x\n", image_base);

    section = IMAGE_FIRST_SECTION(nt_headers);

    for (int i = 0; i < nt_headers->FileHeader.NumberOfSections; i++) {
        //printf("Virtual Addr: %I64x, Name: %s\n", section->VirtualAddress, section->Name);
        dest_addr = (LPVOID)((DWORD64)image_base + section->VirtualAddress);
        src_addr = (LPVOID)((DWORD64)base + section->PointerToRawData);
        memcpy(dest_addr, src_addr, section->SizeOfRawData);
        section++;
    }

    import_desc = (PIMAGE_IMPORT_DESCRIPTOR)((DWORD64)image_base + nt_headers->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT].VirtualAddress);

    for (; import_desc->Name != 0; import_desc++) {

        //printf("import name: %s\n", (DWORD64)image_base + import_desc->Name);
        //printf("%I64x\n", import_desc->FirstThunk);

        thunk_data = (PIMAGE_THUNK_DATA)((DWORD64)image_base + import_desc->FirstThunk);
        lib_name = (PCHAR)((DWORD64)image_base + import_desc->Name);

        hModule = LoadLibraryA(lib_name);

        while (thunk_data->u1.AddressOfData != 0) {
           /* if (IMAGE_SNAP_BY_ORDINAL(thunk_data->u1.Ordinal)) {
                func_name = (PCHAR)IMAGE_ORDINAL(thunk_data->u1.Ordinal);
                printf("%s\n", IMAGE_ORDINAL(thunk_data->u1.Ordinal));
                thunk_data->u1.Function = (DWORD64)GetProcAddress(hModule, func_name);
            }
            else {*/
            PIMAGE_IMPORT_BY_NAME import_by_name = (PIMAGE_IMPORT_BY_NAME)((DWORD64)image_base + thunk_data->u1.AddressOfData);
            func_name = (PCHAR)import_by_name->Name;
            //printf("%s\n", import_by_name->Name);
            thunk_data->u1.Function = (DWORD64)GetProcAddress(hModule, import_by_name->Name);
            //}
            thunk_data++;
        }
    }

    DllEntry dll_entry = (DllEntry)((DWORD64)image_base + nt_headers->OptionalHeader.AddressOfEntryPoint);
    (*dll_entry)((HINSTANCE)image_base, DLL_PROCESS_ATTACH, NULL);
    
    getchar();
}

int main(int argc, char *argv[])
{
    HANDLE hFile;
    DWORD file_size;
    unsigned char* buffer;

    if (argc < 2) {
        printf("usage: %s <dll_file_path>\n", argv[0]);
        exit(0);
    }

    hFile = CreateFileA(
        argv[1],
        GENERIC_READ,
        FILE_SHARE_READ,
        NULL,
        OPEN_EXISTING,
        FILE_ATTRIBUTE_NORMAL,
        NULL
    );

    if (hFile == INVALID_HANDLE_VALUE) {
        printf("could not open file. error: %x\n", GetLastError());
        exit(-1);
    }
    
    file_size = GetFileSize(hFile, NULL);
    buffer = (unsigned char*)malloc(file_size * sizeof(unsigned char*));

    ReadFile(hFile, (LPVOID)buffer, file_size, NULL, NULL);

    /*for (int i = 0; i < 100; i++) {
        printf("%02x ", buffer[i]);
    }*/

    printf("\n");

    load_dll(buffer);
    return 0;
}
