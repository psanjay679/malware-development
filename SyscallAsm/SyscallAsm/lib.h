#pragma once
#include <stdio.h>
#include <Windows.h>
#include <winternl.h>
#include <TlHelp32.h>
#include <vector>
#include <tchar.h>

#pragma comment(lib, "ntdll")

typedef struct _vx_table {
	char* name;
	DWORD64 api_addr;
	DWORD syscall_no;
	DWORD64 jump_addr;
} VX_TABLE, *PVX_TABLE;

std::vector<VX_TABLE> get_vx_table_list();
DWORD64 get_dllbase(wchar_t* dll_name);
HANDLE get_process_handle();
void MyNtAllocateVirtualMemory(std::vector<VX_TABLE> vxtable_list);


EXTERN_C NTSTATUS SyscallNtCreateFile(
	PHANDLE            FileHandle,
	ACCESS_MASK        DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	PIO_STATUS_BLOCK   IoStatusBlock,
	PLARGE_INTEGER     AllocationSize,
	ULONG              FileAttributes,
	ULONG              ShareAccess,
	ULONG              CreateDisposition,
	ULONG              CreateOptions,
	PVOID              EaBuffer,
	ULONG              EaLength
);

EXTERN_C NTSTATUS SyscallZwAlloacteVirtualMemory(
	HANDLE    ProcessHandle,
	PVOID* BaseAddress,
	ULONG_PTR ZeroBits,
	PSIZE_T   RegionSize,
	ULONG     AllocationType,
	ULONG     Protect
);

EXTERN_C NTSTATUS SyscallNtWriteVirtualMemory(
	HANDLE	Handle,
	PVOID	BaseAddress,
	PVOID	DatatoWrite, 
	ULONG	DateSize,
	PULONG	SomeJunkShouldBeNull
);

EXTERN_C NTSTATUS SyscallNtCreateFile(
	PHANDLE FileHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	PIO_STATUS_BLOCK IoStatusBlock,
	PLARGE_INTEGER AllocationSize,
	ULONG FileAttributes,
	ULONG ShareAccess,
	ULONG CreateDisposition,
	ULONG CreateOptions,
	PVOID EaBuffer,
	ULONG EaLength
);


EXTERN_C VOID GetSyscall(WORD);
EXTERN_C VOID GetSyscallAddr(DWORD64);
EXTERN_C NTSTATUS SyscallNtClose(HANDLE handle);
EXTERN_C VOID JumpToShellcode(DWORD64 JumpAddr);
