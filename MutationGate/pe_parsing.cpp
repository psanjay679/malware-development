#include "lib.h"


DWORD64 get_dll_base_from_peb(DWORD api_hash) {

	PPEB peb = (PPEB)__readgsqword(0x60);
	PEB_LDR_DATA* ldr = (PEB_LDR_DATA*)peb->Ldr;
	
	LIST_ENTRY *list_entry = (LIST_ENTRY*)((DWORD64)&ldr->InMemoryOrderModuleList - 0x10);
	LIST_ENTRY* start = list_entry->Flink;

	while (start != list_entry) {
		LDR_DATA_TABLE_ENTRY2* entry = (LDR_DATA_TABLE_ENTRY2*)&(*start);

		unsigned char* dll_buffer = (unsigned char*)entry->BaseDllName.Buffer;
		
		int result = 0;
		BYTE dll_byte;

		for (int i = 0; dll_buffer[i] | dll_buffer[i + 1]; i += 2) {
			dll_byte = *(dll_buffer + i);
			result = api_hashing(result, dll_byte);
		}

		printf("%08x\t%ws\n", result, entry->BaseDllName.Buffer);

		if (result == api_hash) {
			return (DWORD64)entry->DllBase;
		}


		start = start->Flink;
	}

	return 0;
}

DWORD64 get_api_addr(DWORD64 dll_base, DWORD api_hash) {

	PIMAGE_DOS_HEADER dos_header = (PIMAGE_DOS_HEADER)dll_base;
	PIMAGE_NT_HEADERS nt_headers = (PIMAGE_NT_HEADERS)(dll_base + dos_header->e_lfanew);
	PIMAGE_EXPORT_DIRECTORY export_dir = (PIMAGE_EXPORT_DIRECTORY)(dll_base + nt_headers->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);

	WORD* ordinal_arr = (WORD*)(dll_base + export_dir->AddressOfNameOrdinals);
	DWORD* func_arr = (DWORD*)(dll_base + export_dir->AddressOfFunctions);
	DWORD* name_arr = (DWORD*)(dll_base + export_dir->AddressOfNames);

	// printf("[*] Parsing export table...\n");

	for (int i = 0; i < export_dir->NumberOfNames; i++) {

		CHAR* name_addr = (CHAR*)(dll_base + name_arr[i]);

		DWORD result = 0;
		for (int i = 0; name_addr[i]; i++) {
			result = api_hashing(result, name_addr[i]);
		}

		if (result == api_hash) {
			printf("[+] Found api at addr: %I64X hash: %08x, %s\n", dll_base + func_arr[ordinal_arr[i]], api_hash, name_addr);
			return dll_base + func_arr[ordinal_arr[i]];
		}
	}
	return 0;

}