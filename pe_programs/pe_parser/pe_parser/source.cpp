//#include "parse_pe_headers.h"

#include "parse_pe_headers.h"

typedef struct encrypted_str {
	byte key;
	byte size;
	char* data;
}encrypted_str, *pencrypted_str;


void decrypt_str(pencrypted_str penc_str) {
	//pencrypted_str penc_str = (pencrypted_str)enc_str;
	byte size = penc_str->size;
	byte key = penc_str->key;
	for (byte i = 0; i < size; i++) {
		penc_str->data[i] = key ^ penc_str->data[i];
	}
}

void encrypt_str(pencrypted_str penc_str) {
	byte size = 0;
	while (penc_str->data[size++] != 0);
	penc_str->size = size;
	for (byte i = 0; i < size; i++) {
		penc_str->data[i] = penc_str->key ^ penc_str->data[i];
	}
}

int main(int argc, char *argv[]) {

	//char file_name[] = "C:\\Users\\flare\\Desktop\\dbg\\kernel32.dll";
	//PEFile pefile(file_name);
	//pefile.print_exported_functions();
	///*char file_name[] = "C:\\users\\flare\\desktop\\kernel32.dll";
	//PEFile64 pe64(file_name);
	//pe64.iterate_sections();*/

	/*char module_name[] = "kernel32.dll";
	PERemote pe(GetModuleHandleA(module_name));

	pe.iterate_sections();*/

	char data[] = "this_is_my_data";
	pencrypted_str penc_str = (pencrypted_str)malloc(sizeof(pencrypted_str));
	penc_str->data = data;
	penc_str->key = 0xab;

	encrypt_str(penc_str);
	decrypt_str(penc_str);

	return 0;
}
